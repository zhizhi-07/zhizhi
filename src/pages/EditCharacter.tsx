import { useNavigate, useParams } from 'react-router-dom'
import { useState, useRef, useEffect } from 'react'
import { ImageIcon } from '../components/Icons'
import { useCharacter } from '../context/CharacterContext'
import { toPinyin } from '../utils/pinyin'

const EditCharacter = () => {
  const navigate = useNavigate()
  const { id } = useParams<{ id: string }>()
  const { getCharacter, updateCharacter } = useCharacter()
  const fileInputRef = useRef<HTMLInputElement>(null)

  const character = id ? getCharacter(id) : undefined

  const [formData, setFormData] = useState({
    name: character?.name || '',
    nickname: character?.nickname || '',
    username: character?.username || '',
    avatar: character?.avatar || '',
    signature: character?.signature || '',
    description: character?.description || ''
  })

  const [avatarPreview, setAvatarPreview] = useState(character?.avatar || '')
  const [isUploading, setIsUploading] = useState(false)

  useEffect(() => {
    if (character) {
      setFormData({
        name: character.name,
        nickname: character.nickname || '',
        username: character.username,
        avatar: character.avatar,
        signature: character.signature,
        description: character.description
      })
      setAvatarPreview(character.avatar)
    }
  }, [character])

  if (!character) {
    return (
      <div className="h-full flex items-center justify-center">
        <p className="text-gray-500">角色不存在</p>
      </div>
    )
  }

  // 处理头像上传
  const handleAvatarUpload = (e: React.ChangeEvent<HTMLInputElement>) => {
    const file = e.target.files?.[0]
    if (!file) return

    if (!file.type.startsWith('image/')) {
      alert('请选择图片文件')
      return
    }

    if (file.size > 5 * 1024 * 1024) {
      alert('图片大小不能超过5MB')
      return
    }

    setIsUploading(true)

    const reader = new FileReader()
    reader.onloadend = async () => {
      const base64String = reader.result as string
      setAvatarPreview(base64String)
      setFormData({ ...formData, avatar: base64String })
      
      // 🔍 触发AI头像识图并立即保存
      if (character?.id) {
        try {
          console.log('👁️ 开始识别AI角色头像...')
          const visionResponse = await fetch('/.netlify/functions/vision', {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({
              image: base64String,
              prompt: '详细描述这个头像的内容，包括：角色特征、风格、颜色、表情、氛围等。请用简洁的语言描述。'
            })
          })
          
          if (visionResponse.ok) {
            const visionData = await visionResponse.json()
            const avatarDescription = visionData.description || visionData.result
            
            // 直接保存识图结果（编辑时角色ID已存在）
            localStorage.setItem(`character_avatar_description_${character.id}`, avatarDescription)
            localStorage.setItem(`character_avatar_recognized_at_${character.id}`, Date.now().toString())
            // 🔑 保存头像指纹（前200字符），用于检测头像是否变化
            localStorage.setItem(`character_avatar_fingerprint_${character.id}`, base64String.substring(0, 200))
            console.log('✅ AI角色头像识别完成:', avatarDescription)
          } else {
            console.warn('⚠️ 头像识别失败')
          }
        } catch (error) {
          console.error('❌ 头像识别异常:', error)
        }
      }
      
      setIsUploading(false)
    }
    reader.onerror = () => {
      alert('图片读取失败')
      setIsUploading(false)
    }
    reader.readAsDataURL(file)
  }

  // 处理名字变化，自动生成微信号
  const handleNameChange = (name: string) => {
    setFormData(prev => {
      // 如果微信号为空或者是自动生成的，则自动更新
      const isAutoGenerated = !prev.username || prev.username.startsWith('wxid_')
      if (isAutoGenerated && name) {
        const pinyin = toPinyin(name)
        return {
          ...prev,
          name,
          username: `wxid_${pinyin || Date.now().toString().slice(-6)}`
        }
      }
      return { ...prev, name }
    })
  }

  const handleSave = () => {
    if (!formData.name.trim()) {
      alert('请输入角色名字')
      return
    }

    if (!formData.avatar) {
      alert('请上传角色头像')
      return
    }

    // 如果没有微信号，自动生成
    const username = formData.username || `wxid_${toPinyin(formData.name) || Date.now().toString().slice(-6)}`

    updateCharacter(character.id, {
      ...formData,
      username,
      signature: formData.signature || '这个人很懒，什么都没留下',
      description: formData.description
    })
    navigate(`/character/${character.id}`)
  }

  return (
    <div className="h-full flex flex-col">
      {/* 顶部标题栏 */}
      <div className="glass-effect px-4 py-3 flex items-center justify-between border-b border-gray-200/50">
        <button
          onClick={() => navigate(-1)}
          className="ios-button text-gray-700 hover:text-gray-900"
        >
          取消
        </button>
        <h1 className="text-base font-semibold text-gray-900">
          编辑角色
        </h1>
        <button
          onClick={handleSave}
          className="ios-button text-primary font-medium"
        >
          完成
        </button>
      </div>

      {/* 编辑表单 */}
      <div className="flex-1 overflow-y-auto hide-scrollbar px-3 pt-3">
        {/* 上传头像 */}
        <div className="mb-3">
          <div className="px-4 py-2">
            <span className="text-sm text-gray-600 font-medium">角色头像</span>
            <p className="text-xs text-gray-400 mt-1">点击上传本地图片，支持 JPG、PNG、GIF 格式，大小不超过 5MB</p>
          </div>
          <div className="glass-card rounded-2xl p-6 flex justify-center">
            <input
              ref={fileInputRef}
              type="file"
              accept="image/*"
              onChange={handleAvatarUpload}
              className="hidden"
            />
            <button
              onClick={() => fileInputRef.current?.click()}
              disabled={isUploading}
              className="relative w-32 h-32 rounded-2xl bg-gray-100 border-2 border-dashed border-gray-300 flex flex-col items-center justify-center ios-button overflow-hidden"
            >
              {avatarPreview ? (
                <>
                  {avatarPreview.startsWith('data:image') ? (
                    <img
                      src={avatarPreview}
                      alt="头像预览"
                      className="w-full h-full object-cover"
                    />
                  ) : (
                    <span className="text-5xl">{avatarPreview}</span>
                  )}
                  <div className="absolute inset-0 bg-black bg-opacity-0 hover:bg-opacity-20 transition-all flex items-center justify-center">
                    <span className="text-white opacity-0 hover:opacity-100 text-sm">点击更换</span>
                  </div>
                </>
              ) : (
                <>
                  {isUploading ? (
                    <div className="text-gray-400">上传中...</div>
                  ) : (
                    <>
                      <ImageIcon size={32} className="text-gray-400 mb-2" />
                      <span className="text-sm text-gray-500">上传头像</span>
                    </>
                  )}
                </>
              )}
            </button>
          </div>
        </div>

        {/* 基本信息 */}
        <div className="mb-3">
          <div className="px-4 py-2">
            <span className="text-sm text-gray-600 font-medium">角色信息</span>
          </div>
          <div className="glass-card rounded-2xl overflow-hidden">
            <div className="px-4 py-3 border-b border-gray-100">
              <label className="block text-xs text-gray-500 mb-1">真实名字 *</label>
              <input
                type="text"
                value={formData.name}
                onChange={(e) => handleNameChange(e.target.value)}
                placeholder="请输入角色真实名字"
                maxLength={20}
                className="w-full bg-transparent border-none outline-none text-gray-900 placeholder-gray-400"
              />
            </div>

            <div className="px-4 py-3 border-b border-gray-100">
              <label className="block text-xs text-gray-500 mb-1">
                网名
                <span className="text-gray-400 ml-2">（留空则显示真实名字，AI可修改）</span>
              </label>
              <input
                type="text"
                value={formData.nickname}
                onChange={(e) => setFormData({ ...formData, nickname: e.target.value })}
                placeholder="角色的网名"
                maxLength={20}
                className="w-full bg-transparent border-none outline-none text-gray-900 placeholder-gray-400"
              />
            </div>

            <div className="px-4 py-3 border-b border-gray-100">
              <label className="block text-xs text-gray-500 mb-1">
                角色ID账号
                <span className="text-gray-400 ml-2">（留空自动生成）</span>
              </label>
              <input
                type="text"
                value={formData.username}
                onChange={(e) => setFormData({ ...formData, username: e.target.value })}
                placeholder={`wxid_${toPinyin(formData.name) || 'auto'}`}
                className="w-full bg-transparent border-none outline-none text-gray-900 placeholder-gray-400"
              />
            </div>

            <div className="px-4 py-3 border-b border-gray-100">
              <label className="block text-xs text-gray-500 mb-1">个性签名</label>
              <textarea
                value={formData.signature}
                onChange={(e) => setFormData({ ...formData, signature: e.target.value })}
                placeholder="显示在用户资料的个性签名"
                maxLength={100}
                className="w-full h-16 bg-transparent border-none outline-none text-gray-900 placeholder-gray-400 resize-none"
              />
              <div className="text-right text-xs text-gray-400 mt-1">
                {(formData.signature || '').length}/100
              </div>
            </div>

            <div className="px-4 py-3">
              <label className="block text-xs text-gray-500 mb-1">AI角色描述</label>
              <textarea
                value={formData.description}
                onChange={(e) => setFormData({ ...formData, description: e.target.value })}
                placeholder="描述AI角色的背景、性格、说话风格等，用于AI角色扮演（建议详细描述，字数越多AI理解越准确）"
                maxLength={5000}
                className="w-full h-48 bg-transparent border-none outline-none text-gray-900 placeholder-gray-400 resize-none"
              />
              <div className="text-right text-xs text-gray-400 mt-1">
                {(formData.description || '').length}/5000
              </div>
            </div>
          </div>
        </div>

        {/* 提示信息 */}
        <div className="glass-card rounded-2xl p-4 mb-6">
          <div className="text-xs text-gray-500 space-y-2">
            <p>💡 <strong>角色名字：</strong>用于显示在微信界面中</p>
            <p>🆔 <strong>角色ID：</strong>如果不填写，系统会自动根据角色名字的拼音生成 wxid_xxx 格式的ID</p>
            <p>✍️ <strong>个性签名：</strong>显示在用户资料页的签名，对外展示</p>
            <p>🤖 <strong>AI角色描述：</strong>描述AI的背景、性格、说话方式等，用于AI角色扮演（后续接入API时使用）</p>
            <p>🖼️ <strong>头像：</strong>支持本地上传图片，建议使用正方形图片</p>
          </div>
        </div>
      </div>
    </div>
  )
}

export default EditCharacter

