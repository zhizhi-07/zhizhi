import { useNavigate } from 'react-router-dom'
import { useState, useRef } from 'react'
import { BackIcon, ImageIcon } from '../components/Icons'
import { useUser } from '../context/UserContext'
import StatusBar from '../components/StatusBar'
import { useSettings } from '../context/SettingsContext'
import { toPinyin } from '../utils/pinyin'

const CreateUser = () => {
  const navigate = useNavigate()
  const { addUser } = useUser()
  const { showStatusBar } = useSettings()
  const fileInputRef = useRef<HTMLInputElement>(null)

  const [formData, setFormData] = useState({
    name: '',
    username: '',
    avatar: '',
    signature: '这个人很懒，什么都没留下',
    description: ''
  })

  const [isUploading, setIsUploading] = useState(false)

  // 处理头像上传
  const handleAvatarUpload = (e: React.ChangeEvent<HTMLInputElement>) => {
    const file = e.target.files?.[0]
    if (!file) return

    if (!file.type.startsWith('image/')) {
      alert('请选择图片文件')
      return
    }

    if (file.size > 5 * 1024 * 1024) {
      alert('图片大小不能超过5MB')
      return
    }

    setIsUploading(true)

    const reader = new FileReader()
    reader.onloadend = () => {
      const base64String = reader.result as string
      setFormData({ ...formData, avatar: base64String })
      setIsUploading(false)
    }
    reader.onerror = () => {
      alert('图片读取失败')
      setIsUploading(false)
    }
    reader.readAsDataURL(file)
  }

  // 处理名字变化，自动生成微信号
  const handleNameChange = (name: string) => {
    setFormData(prev => {
      const isAutoGenerated = !prev.username || prev.username.startsWith('wxid_')
      if (isAutoGenerated && name) {
        const pinyin = toPinyin(name)
        return {
          ...prev,
          name,
          username: `wxid_${pinyin || Date.now().toString().slice(-6)}`
        }
      }
      return { ...prev, name }
    })
  }

  const handleCreate = () => {
    if (!formData.name.trim()) {
      alert('请输入名字')
      return
    }
    if (!formData.avatar) {
      alert('请上传头像')
      return
    }
    const username = formData.username || `wxid_${toPinyin(formData.name) || Date.now().toString().slice(-6)}`
    addUser({
      ...formData,
      username
    })
    navigate('/me')
  }

  return (
    <div className="h-screen flex flex-col bg-gray-50">
      {showStatusBar && <StatusBar />}
      {/* 顶部标题栏 */}
      <div className="glass-effect px-4 py-3 flex items-center justify-between border-b border-gray-200/50">
        <button
          onClick={() => navigate(-1)}
          className="ios-button text-gray-700 hover:text-gray-900"
        >
          取消
        </button>
        <h1 className="text-base font-semibold text-gray-900">
          创建新账号
        </h1>
        <button
          onClick={handleCreate}
          className="ios-button text-primary font-medium"
        >
          完成
        </button>
      </div>

      {/* 创建表单 */}
      <div className="flex-1 overflow-y-auto hide-scrollbar px-3 pt-3">
        {/* 上传头像 */}
        <div className="mb-3">
          <div className="px-4 py-2">
            <span className="text-sm text-gray-600 font-medium">上传头像</span>
            <p className="text-xs text-gray-400 mt-1">点击上传本地图片，支持 JPG、PNG、GIF 格式</p>
          </div>
          <div className="glass-card rounded-2xl p-6 flex justify-center">
            <input
              ref={fileInputRef}
              type="file"
              accept="image/*"
              onChange={handleAvatarUpload}
              className="hidden"
            />
            <button
              onClick={() => fileInputRef.current?.click()}
              disabled={isUploading}
              className="relative w-32 h-32 rounded-2xl bg-gray-100 border-2 border-dashed border-gray-300 flex flex-col items-center justify-center ios-button overflow-hidden"
            >
              {formData.avatar ? (
                <>
                  <img
                    src={formData.avatar}
                    alt="头像预览"
                    className="w-full h-full object-cover"
                  />
                  <div className="absolute inset-0 bg-black bg-opacity-0 hover:bg-opacity-20 transition-all flex items-center justify-center">
                    <span className="text-white opacity-0 hover:opacity-100 text-sm">点击更换</span>
                  </div>
                </>
              ) : (
                <>
                  {isUploading ? (
                    <div className="text-gray-400">上传中...</div>
                  ) : (
                    <>
                      <ImageIcon size={32} className="text-gray-400 mb-2" />
                      <span className="text-sm text-gray-500">上传头像</span>
                    </>
                  )}
                </>
              )}
            </button>
          </div>
        </div>

        {/* 基本信息 */}
        <div className="mb-3">
          <div className="px-4 py-2">
            <span className="text-sm text-gray-600 font-medium">基本信息</span>
          </div>
          <div className="glass-card rounded-2xl overflow-hidden">
            <div className="px-4 py-3 border-b border-gray-100">
              <label className="block text-xs text-gray-500 mb-1">名字</label>
              <input
                type="text"
                value={formData.name}
                onChange={(e) => handleNameChange(e.target.value)}
                placeholder="请输入名字"
                maxLength={20}
                className="w-full bg-transparent border-none outline-none text-gray-900 placeholder-gray-400"
              />
            </div>

            <div className="px-4 py-3 border-b border-gray-100">
              <label className="block text-xs text-gray-500 mb-1">
                微信号 <span className="text-gray-400">（留空自动生成）</span>
              </label>
              <input
                type="text"
                value={formData.username}
                onChange={(e) => setFormData({ ...formData, username: e.target.value })}
                placeholder={`wxid_${toPinyin(formData.name) || 'auto'}`}
                className="w-full bg-transparent border-none outline-none text-gray-900 placeholder-gray-400"
              />
            </div>

            <div className="px-4 py-3">
              <label className="block text-xs text-gray-500 mb-1">个性签名</label>
              <textarea
                value={formData.signature}
                onChange={(e) => setFormData({ ...formData, signature: e.target.value })}
                placeholder="填写个性签名"
                maxLength={100}
                className="w-full h-20 bg-transparent border-none outline-none text-gray-900 placeholder-gray-400 resize-none"
              />
            </div>
          </div>
        </div>
      </div>
    </div>
  )
}

export default CreateUser

