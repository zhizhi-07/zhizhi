import { useNavigate } from 'react-router-dom'
import { useState, useRef } from 'react'
import { BackIcon, ImageIcon } from '../components/Icons'
import { useCharacter } from '../context/CharacterContext'
import StatusBar from '../components/StatusBar'
import { useSettings } from '../context/SettingsContext'
import { toPinyin } from '../utils/pinyin'

const CreateCharacter = () => {
  const navigate = useNavigate()
  const { addCharacter } = useCharacter()
  const { showStatusBar } = useSettings()
  const fileInputRef = useRef<HTMLInputElement>(null)

  const [formData, setFormData] = useState({
    name: '',
    username: '',
    avatar: '',
    signature: '',
    description: ''
  })

  const [avatarPreview, setAvatarPreview] = useState('')
  const [isUploading, setIsUploading] = useState(false)

  // 处理头像上传
  const handleAvatarUpload = (e: React.ChangeEvent<HTMLInputElement>) => {
    const file = e.target.files?.[0]
    if (!file) return

    // 检查文件类型
    if (!file.type.startsWith('image/')) {
      alert('请选择图片文件')
      return
    }

    // 检查文件大小（限制1MB防止存储溢出）
    if (file.size > 1 * 1024 * 1024) {
      alert('图片大小不能超过1MB，请压缩后上传')
      return
    }

    setIsUploading(true)

    // 读取图片并转换为base64
    const reader = new FileReader()
    reader.onloadend = () => {
      const base64String = reader.result as string
      setAvatarPreview(base64String)
      setFormData({ ...formData, avatar: base64String })
      setIsUploading(false)
    }
    reader.onerror = () => {
      alert('图片读取失败')
      setIsUploading(false)
    }
    reader.readAsDataURL(file)
  }

  // 处理名字变化，自动生成微信号
  const handleNameChange = (name: string) => {
    setFormData(prev => {
      // 如果微信号为空或者是自动生成的，则自动更新
      const isAutoGenerated = !prev.username || prev.username.startsWith('wxid_')
      if (isAutoGenerated && name) {
        const pinyin = toPinyin(name)
        return {
          ...prev,
          name,
          username: `wxid_${pinyin || Date.now().toString().slice(-6)}`
        }
      }
      return { ...prev, name }
    })
  }

  const handleCreate = () => {
    if (!formData.name.trim()) {
      alert('请输入角色名字')
      return
    }

    // 如果没有微信号，自动生成
    const username = formData.username || `wxid_${toPinyin(formData.name) || Date.now().toString().slice(-6)}`

    // 如果没有上传头像，使用默认表情
    const avatar = formData.avatar || '🤖'

    try {
      addCharacter({
        ...formData,
        avatar,
        username,
        signature: formData.signature || '这个人很懒，什么都没留下',
        description: formData.description
      })
      navigate('/contacts')
    } catch (error) {
      console.error('创建角色失败:', error)
      alert('创建失败！可能是存储空间不足，请到设置中清理缓存。')
    }
  }

  return (
    <div className="h-screen flex flex-col bg-gray-50">
      {/* 顶部：StatusBar + 导航栏一体化 */}
      <div className="glass-effect sticky top-0 z-50">
        {showStatusBar && <StatusBar />}
        <div className="px-4 py-3 flex items-center justify-between">
        <button
          onClick={() => navigate(-1)}
          className="ios-button text-gray-700 hover:text-gray-900"
        >
          取消
        </button>
        <h1 className="text-base font-semibold text-gray-900">
          创建角色
        </h1>
        <button
          onClick={handleCreate}
          className="ios-button text-primary font-medium"
        >
          完成
        </button>
        </div>
      </div>

      {/* 创建表单 */}
      <div className="flex-1 overflow-y-auto hide-scrollbar px-3 pt-3">
        {/* 上传头像 */}
        <div className="mb-3">
          <div className="px-4 py-2">
            <span className="text-sm text-gray-600 font-medium">角色头像</span>
            <p className="text-xs text-gray-400 mt-1">可选，不上传将使用默认头像。支持 JPG、PNG、GIF 格式，大小不超过 1MB</p>
          </div>
          <div className="glass-card rounded-2xl p-6 flex justify-center">
            <input
              ref={fileInputRef}
              type="file"
              accept="image/*"
              onChange={handleAvatarUpload}
              className="hidden"
            />
            <button
              onClick={() => fileInputRef.current?.click()}
              disabled={isUploading}
              className="relative w-32 h-32 rounded-2xl bg-gray-100 border-2 border-dashed border-gray-300 flex flex-col items-center justify-center ios-button overflow-hidden"
            >
              {avatarPreview ? (
                <>
                  <img
                    src={avatarPreview}
                    alt="头像预览"
                    className="w-full h-full object-cover"
                  />
                  <div className="absolute inset-0 bg-black bg-opacity-0 hover:bg-opacity-20 transition-all flex items-center justify-center">
                    <span className="text-white opacity-0 hover:opacity-100 text-sm">点击更换</span>
                  </div>
                </>
              ) : (
                <>
                  {isUploading ? (
                    <div className="text-gray-400">上传中...</div>
                  ) : (
                    <>
                      <ImageIcon size={32} className="text-gray-400 mb-2" />
                      <span className="text-sm text-gray-500">上传头像</span>
                    </>
                  )}
                </>
              )}
            </button>
          </div>
        </div>

        {/* 基本信息 */}
        <div className="mb-3">
          <div className="px-4 py-2">
            <span className="text-sm text-gray-600 font-medium">角色信息</span>
          </div>
          <div className="glass-card rounded-2xl overflow-hidden">
            <div className="px-4 py-3 border-b border-gray-100">
              <label className="block text-xs text-gray-500 mb-1">角色名字 *</label>
              <input
                type="text"
                value={formData.name}
                onChange={(e) => handleNameChange(e.target.value)}
                placeholder="请输入角色名字"
                maxLength={20}
                className="w-full bg-transparent border-none outline-none text-gray-900 placeholder-gray-400"
              />
            </div>

            <div className="px-4 py-3 border-b border-gray-100">
              <label className="block text-xs text-gray-500 mb-1">
                角色ID账号
                <span className="text-gray-400 ml-2">（留空自动生成）</span>
              </label>
              <input
                type="text"
                value={formData.username}
                onChange={(e) => setFormData({ ...formData, username: e.target.value })}
                placeholder={`wxid_${toPinyin(formData.name) || 'auto'}`}
                className="w-full bg-transparent border-none outline-none text-gray-900 placeholder-gray-400"
              />
            </div>

            <div className="px-4 py-3 border-b border-gray-100">
              <label className="block text-xs text-gray-500 mb-1">个性签名</label>
              <textarea
                value={formData.signature}
                onChange={(e) => setFormData({ ...formData, signature: e.target.value })}
                placeholder="显示在用户资料的个性签名"
                maxLength={100}
                className="w-full h-16 bg-transparent border-none outline-none text-gray-900 placeholder-gray-400 resize-none"
              />
              <div className="text-right text-xs text-gray-400 mt-1">
                {formData.signature.length}/100
              </div>
            </div>

            <div className="px-4 py-3">
              <label className="block text-xs text-gray-500 mb-1">AI角色描述</label>
              <textarea
                value={formData.description}
                onChange={(e) => setFormData({ ...formData, description: e.target.value })}
                placeholder="描述AI角色的背景、性格、说话风格等，用于AI角色扮演（建议详细描述，字数越多AI理解越准确）"
                maxLength={5000}
                className="w-full h-48 bg-transparent border-none outline-none text-gray-900 placeholder-gray-400 resize-none"
              />
              <div className="text-right text-xs text-gray-400 mt-1">
                {formData.description.length}/5000
              </div>
            </div>
          </div>
        </div>

        {/* 提示信息 */}
        <div className="glass-card rounded-2xl p-4 mb-6">
          <div className="text-xs text-gray-500 space-y-2">
            <p>• <strong>角色名字：</strong>必填，用于显示在微信界面中</p>
            <p>• <strong>角色ID：</strong>可选，不填写系统会自动根据名字拼音生成</p>
            <p>• <strong>个性签名：</strong>可选，显示在用户资料页</p>
            <p>• <strong>AI角色描述：</strong>可选，描述AI的背景、性格、说话方式等</p>
            <p>• <strong>头像：</strong>可选，不上传将使用默认机器人表情</p>
          </div>
        </div>
      </div>
    </div>
  )
}

export default CreateCharacter

