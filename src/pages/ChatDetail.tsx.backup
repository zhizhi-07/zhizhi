import { useNavigate, useParams, useLocation } from 'react-router-dom'
import { useState, useEffect, useRef } from 'react'
import { BackIcon, MoreIcon, SendIcon, AddCircleIcon, EmojiIcon, ImageIcon } from '../components/Icons'
import StatusBar from '../components/StatusBar'
import { useSettings } from '../context/SettingsContext'
import { useCharacter } from '../context/CharacterContext'
import { useUser } from '../context/UserContext'
import { callAI } from '../utils/api'
import { buildRoleplayPrompt } from '../utils/prompts'
import ChatMenu from '../components/ChatMenu'
import RedEnvelopeSender from '../components/RedEnvelopeSender'
import RedEnvelopeDetail from '../components/RedEnvelopeDetail'
import RedEnvelopeCard from '../components/RedEnvelopeCard'
import { useRedEnvelope, generateRedEnvelopeId, RedEnvelope, isRedEnvelopeExpired } from '../context/RedEnvelopeContext'

interface Message {
  id: number
  type: 'received' | 'sent' | 'system'
  content: string
  time: string
  messageType?: 'text' | 'transfer' | 'system' | 'redenvelope'
  transfer?: {
    amount: number
    message: string
    status?: 'pending' | 'received' | 'expired'
  }
  redEnvelopeId?: string
  narrations?: {
    type: 'action' | 'thought'
    content: string
  }[]
}

const ChatDetail = () => {
  const navigate = useNavigate()
  const location = useLocation()
  const { id } = useParams()
  const [inputValue, setInputValue] = useState('')
  const [messages, setMessages] = useState<Message[]>(() => {
    // 从localStorage读取聊天记录
    const saved = localStorage.getItem(`chat_messages_${id}`)
    return saved ? JSON.parse(saved) : []
  })
  const [isAiTyping, setIsAiTyping] = useState(false)
  const [showMenu, setShowMenu] = useState(false)
  const [chatBackground, setChatBackground] = useState(() => {
    // 从localStorage读取背景设置
    const saved = localStorage.getItem(`chat_bg_${id}`)
    return saved || ''
  })
  
  // 从localStorage读取当前聊天的旁白设置
  const [enableNarration, setEnableNarration] = useState(() => {
    const saved = localStorage.getItem(`narrator_enabled_${id}`)
    return saved === 'true'
  })
  
  const { showStatusBar } = useSettings()
  const { getCharacter } = useCharacter()
  const { currentUser } = useUser()
  const { getRedEnvelope, saveRedEnvelope, updateRedEnvelope, getPendingRedEnvelopes } = useRedEnvelope()
  const messagesEndRef = useRef<HTMLDivElement>(null)
  const hasProcessedTransferRef = useRef(false)
  const shouldSmoothScrollRef = useRef(true)
  
  // 红包相关状态
  const [showRedEnvelopeSender, setShowRedEnvelopeSender] = useState(false)
  const [showRedEnvelopeDetail, setShowRedEnvelopeDetail] = useState(false)
  const [selectedRedEnvelope, setSelectedRedEnvelope] = useState<RedEnvelope | null>(null)
  const [canClaimRedEnvelope, setCanClaimRedEnvelope] = useState(false)
  
  // 获取AI角色信息
  const character = id ? getCharacter(id) : undefined
  const characterAvatar = character?.avatar
  const isCharacterCustomAvatar = characterAvatar?.startsWith('data:image')
  
  // 获取当前用户头像
  const userAvatar = currentUser?.avatar || 'default'
  const isUserCustomAvatar = userAvatar.startsWith('data:image')

  // 保存聊天记录到localStorage
  useEffect(() => {
    if (id && messages.length > 0) {
      localStorage.setItem(`chat_messages_${id}`, JSON.stringify(messages))
    }
  }, [messages, id])

  // 保存背景设置
  useEffect(() => {
    if (id) {
      localStorage.setItem(`chat_bg_${id}`, chatBackground)
    }
  }, [chatBackground, id])
  
  // 监听旁白设置变化
  useEffect(() => {
    const handleStorageChange = () => {
      const saved = localStorage.getItem(`narrator_enabled_${id}`)
      setEnableNarration(saved === 'true')
    }
    
    window.addEventListener('storage', handleStorageChange)
    // 组件挂载时检查一次
    const interval = setInterval(() => {
      const saved = localStorage.getItem(`narrator_enabled_${id}`)
      if ((saved === 'true') !== enableNarration) {
        setEnableNarration(saved === 'true')
      }
    }, 500)
    
    return () => {
      window.removeEventListener('storage', handleStorageChange)
      clearInterval(interval)
    }
  }, [id, enableNarration])

  // 自动滚动到底部
  useEffect(() => {
    if (shouldSmoothScrollRef.current) {
      messagesEndRef.current?.scrollIntoView({ behavior: 'smooth' })
    } else {
      messagesEndRef.current?.scrollIntoView({ behavior: 'auto' })
      // 重置为平滑滚动
      shouldSmoothScrollRef.current = true
    }
  }, [messages, isAiTyping])

  // 初始化时不显示欢迎消息，保持空白
  // 用户可以主动发消息，或点击纸飞机让AI主动说话

  // 处理从转账页面返回的数据 - 使用ref防止重复
  useEffect(() => {
    const transferData = location.state?.transfer
    if (transferData && !hasProcessedTransferRef.current) {
      console.log('💸 收到转账数据:', transferData)
      console.log('📝 当前消息数量:', messages.length)
      
      hasProcessedTransferRef.current = true
      
      const { amount, message: transferMessage } = transferData
      
      const transferMsg: Message = {
        id: Date.now(),
        type: 'sent',
        content: '',
        time: new Date().toLocaleTimeString('zh-CN', {
          hour: '2-digit',
          minute: '2-digit',
        }),
        messageType: 'transfer',
        transfer: {
          amount,
          message: transferMessage,
          status: 'pending'
        }
      }
      
      // 禁用平滑滚动，避免从上往下滑动的动画
      shouldSmoothScrollRef.current = false
      
      setMessages(prev => {
        console.log('➕ 添加转账消息，之前有', prev.length, '条消息')
        return [...prev, transferMsg]
      })
      
      // 清除location.state
      window.history.replaceState({}, document.title)
      
      // 延迟重置标记
      setTimeout(() => {
        hasProcessedTransferRef.current = false
        console.log('🔄 转账标记已重置')
      }, 1000)
    }
  }, [location.state?.transfer])

  const handleSend = () => {
    if (inputValue.trim() && !isAiTyping) {
      const userMessage: Message = {
        id: messages.length + 1,
        type: 'sent',
        content: inputValue,
        time: new Date().toLocaleTimeString('zh-CN', {
          hour: '2-digit',
          minute: '2-digit',
        }),
      }
      
      setMessages([...messages, userMessage])
      setInputValue('')
    }
  }

  // 点击纸飞机触发AI回复
  const handleAIReply = async () => {
    if (isAiTyping) return
    // 如果是第一次对话（没有消息），让AI主动打招呼
    await getAIReply(messages)
  }

  // 领取AI发来的转账
  const handleReceiveTransfer = (messageId: number) => {
    console.log('💰 用户领取转账，消息ID:', messageId)
    
    setMessages(prev => {
      const updated = prev.map(msg => {
        if (msg.id === messageId && msg.messageType === 'transfer' && msg.type === 'received') {
          return {
            ...msg,
            transfer: {
              ...msg.transfer!,
              status: 'received' as const
            }
          }
        }
        return msg
      })
      
      // 添加系统提示
      const systemMessage: Message = {
        id: Date.now(),
        type: 'system',
        content: '你已收款',
        time: new Date().toLocaleTimeString('zh-CN', {
          hour: '2-digit',
          minute: '2-digit',
        }),
        messageType: 'system'
      }
      
      return [...updated, systemMessage]
    })
  }

  // 退还AI发来的转账
  const handleRejectTransfer = (messageId: number) => {
    console.log('↩️  用户退还转账，消息ID:', messageId)
    
    setMessages(prev => {
      const updated = prev.map(msg => {
        if (msg.id === messageId && msg.messageType === 'transfer' && msg.type === 'received') {
          return {
            ...msg,
            transfer: {
              ...msg.transfer!,
              status: 'expired' as const
            }
          }
        }
        return msg
      })
      
      // 添加系统提示
      const systemMessage: Message = {
        id: Date.now(),
        type: 'system',
        content: '你已退还转账',
        time: new Date().toLocaleTimeString('zh-CN', {
          hour: '2-digit',
          minute: '2-digit',
        }),
        messageType: 'system'
      }
      
      return [...updated, systemMessage]
    })
  }

  // 红包处理函数
  const handleSendRedEnvelope = (amount: number, blessing: string) => {
    if (!id) return
    
    // 创建红包数据
    const redEnvelope: RedEnvelope = {
      id: generateRedEnvelopeId(),
      amount,
      blessing,
      status: 'pending',
      sender: 'user',
      createdAt: Date.now(),
      claimedBy: null,
      claimedAt: null
    }
    
    // 保存红包
    saveRedEnvelope(id, redEnvelope)
    
    // 创建消息
    const message: Message = {
      id: Date.now(),
      type: 'sent',
      content: `[红包]${blessing}`,
      time: new Date().toLocaleTimeString('zh-CN', {
        hour: '2-digit',
        minute: '2-digit',
      }),
      messageType: 'redenvelope',
      redEnvelopeId: redEnvelope.id
    }
    
    setMessages(prev => [...prev, message])
    setShowRedEnvelopeSender(false)
  }

  const handleOpenRedEnvelope = (redEnvelopeId: string) => {
    if (!id) return
    
    const redEnvelope = getRedEnvelope(id, redEnvelopeId)
    if (!redEnvelope) return
    
    // 判断是否可以领取（AI发的且未领取且未过期）
    const canClaim = redEnvelope.sender === 'ai' && 
                     redEnvelope.status === 'pending' && 
                     !isRedEnvelopeExpired(redEnvelope)
    
    setSelectedRedEnvelope(redEnvelope)
    setCanClaimRedEnvelope(canClaim)
    setShowRedEnvelopeDetail(true)
  }

  const handleClaimRedEnvelope = () => {
    if (!id || !selectedRedEnvelope) return
    
    // 更新红包状态
    updateRedEnvelope(id, selectedRedEnvelope.id, {
      status: 'claimed',
      claimedBy: '我',
      claimedAt: Date.now()
    })
    
    // 添加系统消息
    const systemMessage: Message = {
      id: Date.now(),
      type: 'system',
      content: '你领取了对方的红包',
      time: new Date().toLocaleTimeString('zh-CN', {
        hour: '2-digit',
        minute: '2-digit',
      }),
      messageType: 'system'
    }
    
    setMessages(prev => [...prev, systemMessage])
    setShowRedEnvelopeDetail(false)
    
    // 提示
    alert(`已收到¥${selectedRedEnvelope.amount.toFixed(2)}`)
  }

  // 获取AI回复
  const getAIReply = async (currentMessages: Message[]) => {
    setIsAiTyping(true)
    
    console.log('🎭 开始生成AI回复')
    console.log('👤 角色:', character?.name)
    console.log('💬 当前消息数:', currentMessages.length)

    try {
      // 使用角色扮演提示词
      const systemPrompt = buildRoleplayPrompt(
        {
          name: character?.name || 'AI',
          signature: character?.signature,
          description: character?.description
        },
        {
          name: currentUser?.name || '用户'
        }
      )

      // 构建对话历史（只保留最近10条，避免上下文过长）
      const recentMessages = currentMessages.slice(-10).filter(msg => msg.type !== 'system')
      
      console.log('📋 构建对话历史:')
      recentMessages.forEach((msg, idx) => {
        if (msg.messageType === 'transfer') {
          console.log(`  ${idx + 1}. [转账] ${msg.type === 'sent' ? '用户→AI' : 'AI→用户'}: ¥${msg.transfer?.amount} (${msg.transfer?.status})`)
        } else {
          console.log(`  ${idx + 1}. [消息] ${msg.type === 'sent' ? '用户' : 'AI'}: ${msg.content.substring(0, 30)}...`)
        }
      })
      
      // 构建系统提示词
      let fullSystemPrompt = systemPrompt + `\n\n【转账处理规则】\n如果用户给你发了转账，你可以：\n1. 接收：在回复中包含 [接收转账] 标记\n2. 拒绝/退还：在回复中包含 [退还转账] 标记\n3. 什么都不做：不包含任何标记\n\n你也可以主动给用户转账：\n在回复中使用格式：[转账:金额:说明]\n例如：谢谢你的帮助[转账:50:给你的小费]\n\n根据你的性格、和用户的关系、转账金额、转账说明来决定。要自然，符合你的性格。`
      
      // 根据旁白设置添加规则
      if (enableNarration) {
        fullSystemPrompt += `\n\n【旁白模式已开启】\n\n你可以使用旁白来描述动作、表情、心理活动。旁白使用特殊标记：\n\n格式：[旁白]你的旁白内容[/旁白]\n\n示例：\n[旁白]看到消息笑了[/旁白]\n好呀\n[旁白]挠了挠头[/旁白]\n不过我有点忙\n\n旁白规则：\n• 旁白描述动作、表情、心理活动\n• 旁白和文字消息可以穿插使用\n• 可以只发旁白不回复（生气、不想理的时候）\n• 旁白内容要简短自然\n• 不要在旁白中描述时间流逝（禁止"过了一会儿"、"十分钟后"等）\n\n三种回复方式：\n1. 正常回复：[旁白]看到消息笑了[/旁白] + 干嘛呀\n2. 敷衍回复：[旁白]看了一眼，有点烦[/旁白] + 嗯\n3. 不回复：[旁白]看到消息，冷笑了一声[/旁白][旁白]直接把手机扔到一边，懒得理[/旁白]`
      } else {
        fullSystemPrompt += `\n\n【重要提醒：旁白模式未开启】\n你不能使用旁白！不要在消息中描述任何动作、表情、心理活动！\n\n严格禁止：\n❌ 不要描述动作（如：点头、摇头、叹气、挠头、翻白眼）\n❌ 不要描述表情（如：笑了、皱眉、微笑、苦笑）\n❌ 不要描述心理（如：心想、暗自、觉得、想到）\n❌ 不要用任何符号描述（如：（认真点头）、*笑*、【叹气】、[旁白]）\n\n只能发送纯对话内容，就像真人在微信上打字聊天一样。\n\n错误示例：\n"（认真点头）以后天天陪你玩" ← 有动作描述，错误！\n"*笑* 好啊" ← 有表情描述，错误！\n"[旁白]笑了[/旁白]好啊" ← 使用了旁白，错误！\n\n正确示例：\n"以后天天陪你玩" ← 纯文字，正确\n"好啊哈哈" ← 纯文字，正确`
      }
      
      console.log('📖 旁白模式:', enableNarration ? '开启' : '关闭')
      
      const apiMessages = [
        {
          role: 'system' as const,
          content: fullSystemPrompt
        },
        ...recentMessages.map(msg => {
          // 过滤掉系统消息
          if (msg.type === 'system') {
            return null
          }
          
          // 如果是转账消息，转换为AI可读的格式
          if (msg.messageType === 'transfer' && msg.transfer) {
            const transferInfo = `[用户给你发起了转账：¥${msg.transfer.amount.toFixed(2)}，说明：${msg.transfer.message}，状态：${msg.transfer.status === 'pending' ? '待处理' : msg.transfer.status === 'received' ? '已收款' : '已退还'}]`
            console.log('💸 转账消息传递给AI:', transferInfo)
            return {
              role: msg.type === 'sent' ? 'user' as const : 'assistant' as const,
              content: transferInfo
            }
          }
          
          return {
            role: msg.type === 'sent' ? 'user' as const : 'assistant' as const,
            content: msg.content
          }
        }).filter(msg => msg !== null)
      ]
      
      console.log('📤 发送给AI的消息总数:', apiMessages.length)

      // 调用AI
      const aiResponse = await callAI(apiMessages)
      
      console.log('📨 AI原始回复:', aiResponse)
      
      // 检查AI是否对转账做出决定
      let transferAction: 'accept' | 'reject' | null = null
      let cleanedResponse = aiResponse
      
      // 检查AI是否要发起转账
      const transferMatch = aiResponse.match(/\[转账:(\d+\.?\d*):(.+?)\]/)
      let aiTransferData: { amount: number; message: string } | null = null
      
      if (transferMatch) {
        aiTransferData = {
          amount: parseFloat(transferMatch[1]),
          message: transferMatch[2]
        }
        cleanedResponse = aiResponse.replace(/\[转账:\d+\.?\d*:.+?\]/g, '').trim()
        console.log('💰 AI发起转账:', aiTransferData)
      }
      
      if (aiResponse.includes('[接收转账]')) {
        transferAction = 'accept'
        cleanedResponse = cleanedResponse.replace(/\[接收转账\]/g, '').trim()
        console.log('✅ AI决定：接收转账')
      } else if (aiResponse.includes('[退还转账]')) {
        transferAction = 'reject'
        cleanedResponse = cleanedResponse.replace(/\[退还转账\]/g, '').trim()
        console.log('↩️  AI决定：退还转账')
      } else if (!aiTransferData) {
        console.log('⏸️  AI未对转账做出决定')
      }
      
      // 如果有转账操作，更新最新的待处理转账状态并添加系统提示
      if (transferAction) {
        // 从后往前找最新的待处理转账
        for (let i = currentMessages.length - 1; i >= 0; i--) {
          const msg = currentMessages[i]
          if (msg.messageType === 'transfer' && 
              msg.type === 'sent' && 
              msg.transfer?.status === 'pending') {
            const updatedMessages = [...currentMessages]
            updatedMessages[i] = {
              ...updatedMessages[i],
              transfer: {
                ...updatedMessages[i].transfer!,
                status: transferAction === 'accept' ? 'received' : 'expired'
              }
            }
            
            // 添加系统提示消息
            const systemMessage: Message = {
              id: Date.now(),
              type: 'system',
              content: transferAction === 'accept' 
                ? `${character?.name || '对方'}已收款` 
                : `${character?.name || '对方'}退还了转账`,
              time: new Date().toLocaleTimeString('zh-CN', {
                hour: '2-digit',
                minute: '2-digit',
              }),
              messageType: 'system'
            }
            updatedMessages.push(systemMessage)
            
            setMessages(updatedMessages)
            currentMessages = updatedMessages
            break
          }
        }
      }

      // 处理AI回复 - 支持多条消息（按换行分割）
      let newMessages = [...currentMessages]
      
      // 如果有文字回复
      if (cleanedResponse.trim()) {
        const responseLines = cleanedResponse.trim().split('\n').filter(line => line.trim())
        
        // 如果回复只有一行，直接添加
        if (responseLines.length === 1) {
          // 提取旁白内容
          const narrations: { type: 'action' | 'thought'; content: string }[] = []
          let textContent = responseLines[0]
          
          if (enableNarration) {
            // 提取旁白 [旁白]内容[/旁白]
            const narrationMatches = textContent.match(/\[旁白\]([^\[]+?)\[\/旁白\]/g)
            if (narrationMatches) {
              narrationMatches.forEach(match => {
                const content = match.replace(/\[旁白\]|\[\/旁白\]/g, '').trim()
                if (content) {
                  narrations.push({
                    type: 'action',
                    content: content
                  })
                }
              })
              textContent = textContent.replace(/\[旁白\][^\[]+?\[\/旁白\]/g, '').trim()
            }
          }
          
          const aiMessage: Message = {
            id: newMessages.length + 1,
            type: 'received',
            content: textContent,
            time: new Date().toLocaleTimeString('zh-CN', {
              hour: '2-digit',
              minute: '2-digit',
            }),
            narrations: narrations.length > 0 ? narrations : undefined
          }
          newMessages.push(aiMessage)
          setMessages(newMessages)
        } else {
          // 多行回复，分多条消息逐个显示，模拟真人打字
          for (let i = 0; i < responseLines.length; i++) {
            await new Promise(resolve => setTimeout(resolve, 300 + Math.random() * 500)) // 随机延迟
            
            // 提取旁白内容
            const narrations: { type: 'action' | 'thought'; content: string }[] = []
            let textContent = responseLines[i]
            
            if (enableNarration) {
              // 提取旁白 [旁白]内容[/旁白]
              const narrationMatches = textContent.match(/\[旁白\]([^\[]+?)\[\/旁白\]/g)
              if (narrationMatches) {
                narrationMatches.forEach(match => {
                  const content = match.replace(/\[旁白\]|\[\/旁白\]/g, '').trim()
                  if (content) {
                    narrations.push({
                      type: 'action',
                      content: content
                    })
                  }
                })
                textContent = textContent.replace(/\[旁白\][^\[]+?\[\/旁白\]/g, '').trim()
              }
            }
            
            const aiMessage: Message = {
              id: newMessages.length + 1,
              type: 'received',
              content: textContent,
              time: new Date().toLocaleTimeString('zh-CN', {
                hour: '2-digit',
                minute: '2-digit',
              }),
              narrations: narrations.length > 0 ? narrations : undefined
            }
            newMessages = [...newMessages, aiMessage]
            setMessages(newMessages)
          }
        }
      }
      
      // 如果AI发起了转账
      if (aiTransferData) {
        await new Promise(resolve => setTimeout(resolve, 500)) // 稍微延迟一下
        
        const aiTransferMessage: Message = {
          id: Date.now(),
          type: 'received',
          content: '',
          time: new Date().toLocaleTimeString('zh-CN', {
            hour: '2-digit',
            minute: '2-digit',
          }),
          messageType: 'transfer',
          transfer: {
            amount: aiTransferData.amount,
            message: aiTransferData.message,
            status: 'pending'
          }
        }
        newMessages = [...newMessages, aiTransferMessage]
        setMessages(newMessages)
        console.log('💸 AI转账卡片已添加')
      }
    } catch (error: any) {
      console.error('━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━')
      console.error('❌ AI调用失败')
      console.error('错误信息:', error.message)
      console.error('错误详情:', error)
      console.error('━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\n')
      
      // 显示错误消息
      const errorMessage: Message = {
        id: currentMessages.length + 1,
        type: 'received',
        content: `[错误] ${error.message || 'AI调用失败，请在设置中检查API配置'}`,
        time: new Date().toLocaleTimeString('zh-CN', {
          hour: '2-digit',
          minute: '2-digit',
        }),
      }
      setMessages([...currentMessages, errorMessage])
    } finally {
      setIsAiTyping(false)
      console.log('🏁 AI回复流程结束\n')
    }
  }

  // 背景样式映射
  const getBackgroundStyle = (bg: string) => {
    // 如果是自定义图片（base64或URL）
    if (bg && (bg.startsWith('data:image') || bg.startsWith('http'))) {
      return {
        className: '',
        style: {
          backgroundImage: `url(${bg})`,
          backgroundSize: 'cover',
          backgroundPosition: 'center'
        }
      }
    }
    // 默认背景
    return { className: 'gradient-bg' }
  }

  const currentBgStyle = getBackgroundStyle(chatBackground)

  return (
    <div 
      className={`h-screen flex flex-col ${currentBgStyle.className}`}
      style={currentBgStyle.style}
    >
      {/* iOS状态栏 - 根据设置显示 */}
      {showStatusBar && <StatusBar />}
      {/* 顶部导航栏 - 玻璃效果 */}
      <div className={`px-4 py-3 flex items-center justify-between border-b border-gray-200/50 ${chatBackground ? 'glass-dark' : 'glass-effect'}`}>
        <button
          onClick={() => navigate(-1)}
          className="ios-button text-gray-700 hover:text-gray-900 -ml-2"
        >
          <BackIcon size={24} />
        </button>
        <h1 className="text-base font-semibold text-gray-900">
          {character?.name || '聊天'}
        </h1>
        <button 
          onClick={() => navigate(`/chat-settings/${id}`)}
          className="ios-button text-gray-700 hover:text-gray-900"
        >
          <MoreIcon size={24} />
        </button>
      </div>

      {/* 聊天消息区域 */}
      <div className="flex-1 overflow-y-auto hide-scrollbar px-4 py-4">
        {messages.length === 0 ? (
          <div className="empty-state">
            <p className="text-gray-400 text-base">开始聊天吧</p>
          </div>
        ) : (
           <>
             {messages.map((message) => {
               if (message.type === 'system') {
                 return (
                   <div key={message.id} className="flex justify-center mb-4">
                     <div className="bg-gray-200/80 px-3 py-1.5 rounded-md">
                       <span className="text-xs text-gray-600">{message.content}</span>
                     </div>
                   </div>
                 )
               }
               
               // 如果消息只有旁白没有文字内容，单独居中显示
               if (message.narrations && message.narrations.length > 0 && !message.content && !message.messageType) {
                 return (
                   <div key={message.id} className="mb-4">
                     {message.narrations.map((narration, idx) => (
                       <div
                         key={idx}
                         className="text-center text-xs text-gray-500 italic mb-2"
                       >
                         {narration.content}
                       </div>
                     ))}
                   </div>
                 )
               }
               
               return (
                 <div key={message.id} className="mb-4">
                   {/* 旁白内容 - 居中显示在消息上方 */}
                   {message.narrations && message.narrations.length > 0 && (
                     <div className="mb-2">
                       {message.narrations.map((narration, idx) => (
                         <div
                           key={idx}
                           className="text-center text-xs text-gray-500 italic mb-1"
                         >
                           {narration.content}
                         </div>
                       ))}
                     </div>
                   )}
                   
                   {/* 消息主体 */}
                   <div
                     className={`flex ${
                       message.type === 'sent' ? 'justify-end message-sent' : 'justify-start message-received'
                     }`}
                   >
                   {/* 对方消息：头像在左，气泡在右 */}
                   {message.type === 'received' && (
                     <div className="w-10 h-10 rounded-xl bg-gray-200 flex items-center justify-center flex-shrink-0 mr-2 shadow-lg overflow-hidden">
                       {isCharacterCustomAvatar ? (
                         <img src={characterAvatar} alt="角色头像" className="w-full h-full object-cover" />
                       ) : (
                         <span className="text-2xl">{characterAvatar || '🤖'}</span>
                         <div className="flex-1">
                           <div className="text-sm text-gray-900 font-medium">转账</div>
                           <div className="text-xs text-gray-500 mt-0.5">
                             {message.transfer.message || '转账'}
                           </div>
                         </div>
                       </div>
                       <div className="border-t border-gray-200 pt-3">
                         {message.type === 'received' && message.transfer.status === 'pending' ? (
                           <>
                             <div className="flex items-center justify-between mb-3">
                               <span className="text-2xl font-semibold text-gray-900">
                                 ¥{message.transfer.amount.toFixed(2)}
                               </span>
                             </div>
                             <div className="flex gap-2">
                               <button 
                                 onClick={() => handleRejectTransfer(message.id)}
                                 className="flex-1 px-4 py-2 bg-gray-100 text-gray-700 text-sm rounded-full ios-button"
                               >
                                 退还
                               </button>
                               <button 
                                 onClick={() => handleReceiveTransfer(message.id)}
                                 className="flex-1 px-4 py-2 bg-primary text-white text-sm rounded-full ios-button"
                               >
                                 领取
                               </button>
                             </div>
                           </>
                         ) : (
                           <div className="flex items-center justify-between">
                             <span className="text-2xl font-semibold text-gray-900">
                               ¥{message.transfer.amount.toFixed(2)}
                             </span>
                             {message.transfer.status === 'received' && (
                               <span className="text-xs text-gray-400">
                                 {message.type === 'sent' ? '已收款' : '你已收款'}
                               </span>
                             )}
                             {message.transfer.status === 'expired' && (
                               <span className="text-xs text-gray-400">
                                 {message.type === 'sent' ? '已退还' : '你已退还'}
                               </span>
                             )}
                           </div>
                         )}
                       </div>
                     </div>
                   ) : (
                     <div>
                       {/* 文字内容 */}
                       {message.content && (
                         <div
                           className={`px-4 py-3 rounded-2xl break-words shadow-lg ${
                             message.type === 'sent'
                               ? 'bg-wechat-primary text-white rounded-tr-sm'
                               : message.content.startsWith('[错误]')
                               ? 'bg-red-100 text-red-700 rounded-tl-sm'
                               : 'glass-card text-gray-900 rounded-tl-sm'
                           }`}
                         >
                           {message.content}
                         </div>
                       )}
                     </div>
                   )}
                 </div>
                 
                   {/* 自己消息：气泡在左，头像在右 */}
                   {message.type === 'sent' && (
                     <div className="w-10 h-10 rounded-xl bg-gray-200 flex items-center justify-center flex-shrink-0 ml-2 shadow-lg overflow-hidden">
                       {isUserCustomAvatar ? (
                         <img src={userAvatar} alt="我的头像" className="w-full h-full object-cover" />
                       ) : (
                         <span className="text-2xl">👤</span>
                       )}
                     </div>
                   )}
                 </div>
                 </div>
               )
             })}
             
             {/* AI正在输入 */}
             {isAiTyping && (
               <div className="flex mb-4 justify-start">
                 <div className="w-10 h-10 rounded-xl bg-gray-200 flex items-center justify-center flex-shrink-0 mr-2 shadow-lg overflow-hidden">
                   {isCharacterCustomAvatar ? (
                     <img src={characterAvatar} alt="角色头像" className="w-full h-full object-cover" />
                   ) : (
                     <span className="text-2xl">{characterAvatar || '🤖'}</span>
                   )}
                 </div>
                 <div className="glass-card px-4 py-3 rounded-2xl rounded-tl-sm shadow-lg">
                   <div className="flex gap-1">
                     <div className="w-2 h-2 bg-gray-400 rounded-full animate-bounce" style={{ animationDelay: '0ms' }}></div>
                     <div className="w-2 h-2 bg-gray-400 rounded-full animate-bounce" style={{ animationDelay: '150ms' }}></div>
                     <div className="w-2 h-2 bg-gray-400 rounded-full animate-bounce" style={{ animationDelay: '300ms' }}></div>
                   </div>
                 </div>
               </div>
             )}
             <div ref={messagesEndRef} />
           </>
          )}
        </div>

      {/* 底部输入区域 - 玻璃效果 */}
      <div className={`border-t border-gray-200/50 ${chatBackground ? 'glass-dark' : 'glass-effect'}`}>
        <div className="px-3 py-3 flex items-center gap-2">
          <button 
            onClick={() => setShowMenu(!showMenu)}
            className="w-10 h-10 flex items-center justify-center ios-button text-gray-700"
          >
            <AddCircleIcon size={26} />
          </button>
          <div className="flex-1 flex items-center bg-white/90 rounded-full px-4 py-2 shadow-inner">
            <input
              type="text"
              value={inputValue}
              onChange={(e) => setInputValue(e.target.value)}
              onKeyPress={(e) => e.key === 'Enter' && !isAiTyping && handleSend()}
              placeholder={isAiTyping ? 'AI正在输入...' : '发送消息'}
              disabled={isAiTyping}
              className="flex-1 bg-transparent border-none outline-none text-gray-900 placeholder-gray-400"
            />
          </div>
          <button className="w-10 h-10 flex items-center justify-center ios-button text-gray-700">
            <EmojiIcon size={22} />
          </button>
          {inputValue.trim() ? (
            <button
              onClick={handleSend}
              disabled={isAiTyping}
              className={`w-10 h-10 flex items-center justify-center ios-button bg-wechat-green text-white rounded-full shadow-lg ${
                isAiTyping ? 'opacity-50' : ''
              }`}
            >
              <SendIcon size={18} />
            </button>
          ) : (
            <button 
              onClick={handleAIReply}
              disabled={isAiTyping}
              className={`w-10 h-10 flex items-center justify-center ios-button text-gray-700 ${
                isAiTyping ? 'opacity-50' : ''
              }`}
            >
              <SendIcon size={22} />
            </button>
          )}
        </div>
        {!showMenu && (
          <div className="flex justify-center pb-2">
            <div className="w-32 h-1 bg-gray-900 rounded-full opacity-40"></div>
          </div>
        )}
      </div>

      {/* 聊天菜单 */}
      {showMenu && (
        <ChatMenu
          onClose={() => setShowMenu(false)}
          onSelectImage={() => {
            setShowMenu(false)
            alert('相册功能开发中')
          }}
          onSelectCamera={() => {
            setShowMenu(false)
            alert('拍摄功能开发中')
          }}
          onSelectRedPacket={() => {
            setShowMenu(false)
            alert('红包功能开发中')
          }}
          onSelectTransfer={() => {
            setShowMenu(false)
            navigate('/send-transfer', {
              state: {
                characterName: character?.name || '对方',
                chatId: id
              }
            })
          }}
          onSelectLocation={() => {
            setShowMenu(false)
            alert('位置功能开发中')
          }}
          onSelectVoiceCall={() => {
            setShowMenu(false)
            alert('语音通话功能开发中')
          }}
          onSelectVideoCall={() => {
            setShowMenu(false)
            alert('视频通话功能开发中')
          }}
          onSelectFavorite={() => {
            setShowMenu(false)
            alert('收藏功能开发中')
          }}
        />
      )}
    </div>
  )
}

export default ChatDetail
